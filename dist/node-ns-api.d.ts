// Generated by dts-bundle v0.7.3

declare module 'node-ns-api' {
    import { API } from "node-ns-api/api";
    import { Station } from "node-ns-api/domain/station";
    import { Verstoring } from "node-ns-api/domain/verstoring";
    import { ArrivalBoard } from "node-ns-api/domain/arrival-board";
    import { APIMessage } from "node-ns-api/domain/api-message";
    import { Arrival } from "node-ns-api/domain/arrival";
    import { BaanvakBeperking } from "node-ns-api/domain/baanvak-beperking";
    import { Departure } from "node-ns-api/domain/departure";
    import { DepartureBoard } from "node-ns-api/domain/departure-board";
    import { DepartureArrivalMessage } from "node-ns-api/domain/departure-arrival-message";
    import { Destination } from "node-ns-api/domain/destination";
    import { CommutingType, TravelType, StationType, Richting, VerstoringsType, CrowdForecast, DiscountType, ProductType, TravelClass, Status, AdviceSource, CheckinStatus, ExitSide, NoteType, LocationType, ContentType, JourneyStatus, MessageType } from "node-ns-api/domain/enums";
    import { Geldigheid } from "node-ns-api/domain/geldigheid";
    import { JourneyDetailLink } from "node-ns-api/domain/journey-detail-link";
    import { LatLng } from "node-ns-api/domain/lat-lng";
    import { Leg } from "node-ns-api/domain/leg";
    import { Link } from "node-ns-api/domain/links";
    import { Locatie } from "node-ns-api/domain/locatie";
    import { Location } from "node-ns-api/domain/location";
    import { Message } from "node-ns-api/domain/message";
    import { Namen } from "node-ns-api/domain/namen";
    import { Note } from "node-ns-api/domain/note";
    import { PrijsTraject } from "node-ns-api/domain/prijs-traject";
    import { Product } from "node-ns-api/domain/product";
    import { Reisadviezen } from "node-ns-api/domain/reisadviezen";
    import { Self } from "node-ns-api/domain/self";
    import { ShareURL } from "node-ns-api/domain/share-url";
    import { Step } from "node-ns-api/domain/step";
    import { Stop } from "node-ns-api/domain/stop";
    import { Traject } from "node-ns-api/domain/traject";
    import { TravelAdvice } from "node-ns-api/domain/travel-advice";
    import { Trip } from "node-ns-api/domain/trip";
    import { VerstoringReisadvies } from "node-ns-api/domain/verstoring-reisadvies";
    import { ArrivalDepartureParameters } from "node-ns-api/params/arrival-departure-parameters";
    import { DisruptionParameters } from "node-ns-api/params/disruption-parameters";
    import { TripParameters } from "node-ns-api/params/trip-parameters";
    import { TripsParameters } from "node-ns-api/params/trips-parameters";
    export { API, Station, Verstoring, ArrivalBoard, DepartureBoard, APIMessage, Arrival, BaanvakBeperking, Departure, DepartureArrivalMessage, Destination, CommutingType, TravelType, StationType, Richting, VerstoringsType, CrowdForecast, DiscountType, ProductType, TravelClass, Status, AdviceSource, CheckinStatus, ExitSide, NoteType, LocationType, ContentType, JourneyStatus, MessageType, Geldigheid, JourneyDetailLink, LatLng, Leg, Link, Locatie, Location, Message, Namen, Note, PrijsTraject, Product, Reisadviezen, Self, ShareURL, Step, Stop, Traject, TravelAdvice, Trip, VerstoringReisadvies, ArrivalDepartureParameters, DisruptionParameters, TripParameters, TripsParameters };
}

declare module 'node-ns-api/api' {
    import { IApi } from 'node-ns-api/i-api';
    import { Station } from 'node-ns-api/domain/station';
    import { Verstoring } from 'node-ns-api/domain/verstoring';
    import { TravelAdvice } from 'node-ns-api/domain/travel-advice';
    import { DepartureBoard } from 'node-ns-api/domain/departure-board';
    import { ArrivalDepartureParameters } from 'node-ns-api/params/arrival-departure-parameters';
    import { ArrivalBoard } from 'node-ns-api/domain/arrival-board';
    import { TripParameters } from 'node-ns-api/params/trip-parameters';
    import { TripsParameters } from 'node-ns-api/params/trips-parameters';
    import { DisruptionParameters } from 'node-ns-api/params/disruption-parameters';
    export class API implements IApi {
        constructor(token: string);
        getAllStations(): Promise<Station[]>;
        getArrivals(params?: ArrivalDepartureParameters | undefined): Promise<ArrivalBoard>;
        getDepartures(params?: ArrivalDepartureParameters | undefined): Promise<DepartureBoard>;
        getBigDepartures(params?: ArrivalDepartureParameters | undefined): Promise<DepartureBoard>;
        getDisruption(params: {
            id: string;
        }): Promise<Verstoring>;
        getDisruptions(params?: DisruptionParameters | undefined): Promise<Verstoring>;
        getStationDisruption(params: {
            code: string;
        }): Promise<Verstoring>;
        getTrip(params?: TripParameters | undefined): Promise<TravelAdvice>;
        getTrips(params?: TripsParameters | undefined): Promise<TravelAdvice>;
    }
}

declare module 'node-ns-api/domain/station' {
    import { Namen } from "node-ns-api/domain/namen";
    import { StationType } from "node-ns-api/domain/enums";
    export interface Station {
        code?: string;
        evacode?: string;
        heeftFaciliteiten?: boolean;
        heeftReisassistentie?: boolean;
        heeftVertrektijden?: boolean;
        land?: string;
        lat?: number;
        lng?: number;
        naderenRadius?: number;
        namen?: Namen;
        radius?: number;
        stationType?: StationType;
        synoniemen?: string[];
        uiccode?: string;
    }
}

declare module 'node-ns-api/domain/verstoring' {
    import { Reisadviezen } from "node-ns-api/domain/reisadviezen";
    import { Traject } from "node-ns-api/domain/traject";
    import { VerstoringsType } from "node-ns-api/domain/enums";
    import { BaanvakBeperking } from "node-ns-api/domain/baanvak-beperking";
    import { Baanvak } from "node-ns-api/domain/baanvak";
    import { Geldigheid } from "node-ns-api/domain/geldigheid";
    export interface Verstoring {
        alternatiefVervoer?: string;
        baanvakBeperking?: BaanvakBeperking[];
        baanvakken?: Baanvak[];
        extraReistijd?: string;
        fase?: string;
        geldigheidsLijst?: Geldigheid[];
        gevolg?: string;
        gevolgType?: string;
        header?: string;
        id?: string;
        impact?: number;
        landelijk?: boolean;
        leafletUrl?: string;
        maatschappij?: number;
        meldtijd?: string;
        oorzaak?: string;
        periode?: string;
        prioriteit?: number;
        reden?: string;
        reisadviezen?: Reisadviezen;
        trajecten?: Traject[];
        type?: VerstoringsType;
        versie?: string;
        verwachting?: string;
        volgnummer?: string;
    }
}

declare module 'node-ns-api/domain/arrival-board' {
    import { Arrival } from "node-ns-api/domain/arrival";
    export interface ArrivalBoard {
        arrivals?: Arrival[];
    }
}

declare module 'node-ns-api/domain/api-message' {
    import { Link } from "node-ns-api/domain/links";
    import { Self } from "node-ns-api/domain/self";
    export interface APIMessage<T> {
        links?: {
            [key: string]: Link;
        };
        meta?: {
            [key: string]: {
                [key: string]: any;
            };
        };
        payload?: T;
        self?: Self;
    }
}

declare module 'node-ns-api/domain/arrival' {
    import { Product } from "node-ns-api/domain/product";
    import { DepartureArrivalMessage } from "node-ns-api/domain/departure-arrival-message";
    export interface Arrival {
        actualDateTime?: string;
        actualOrPlannedTime?: string;
        actualTrack?: string;
        cancelled?: boolean;
        journeyDetailRef?: string;
        messages?: DepartureArrivalMessage[];
        name?: string;
        origin?: string;
        plannedDateTime?: string;
        plannedTrack?: string;
        product?: Product;
        routeStations?: {
            [key: string]: any;
        }[];
        trainCategory?: string;
    }
}

declare module 'node-ns-api/domain/baanvak-beperking' {
    import { Richting } from "node-ns-api/domain/enums";
    import { Locatie } from "node-ns-api/domain/locatie";
    export interface BaanvakBeperking {
        richting?: Richting;
        tot?: Locatie;
        van?: Locatie;
        via?: Locatie[];
    }
}

declare module 'node-ns-api/domain/departure' {
    import { Product } from "node-ns-api/domain/product";
    export interface Departure {
        actualDateTime?: string;
        actualTrack?: string;
        cancelled?: boolean;
        direction?: string;
        journeyDetailRef?: string;
        name?: string;
        plannedDateTime?: string;
        plannedTrack?: string;
        product?: Product;
        trainCategory?: string;
    }
}

declare module 'node-ns-api/domain/departure-board' {
    import { Departure } from "node-ns-api/domain/departure";
    export interface DepartureBoard {
        departures?: Departure[];
    }
}

declare module 'node-ns-api/domain/departure-arrival-message' {
    export interface DepartureArrivalMessage {
        message?: string;
        priority?: number;
    }
}

declare module 'node-ns-api/domain/destination' {
    import { CheckinStatus, ExitSide, LocationType } from "node-ns-api/domain/enums";
    import { Note } from "node-ns-api/domain/note";
    export interface Destination {
        actualDateTime?: string;
        actualTimeZoneOffset?: number;
        actualTrack?: string;
        checkinStatus?: CheckinStatus;
        city?: string;
        countryCode?: string;
        domestic?: boolean;
        exitSide?: ExitSide;
        lat?: number;
        latestKnownTrack?: string;
        lng?: number;
        name?: string;
        notes?: Note[];
        plannedDateTime?: string;
        plannedTimeZoneOffset?: number;
        plannedTrack?: string;
        products?: number;
        prognosisType?: string;
        travelAssistanceBookingInfo?: {
            [key: string]: any;
        };
        travelAssistanceMeetingPoints?: string[];
        type?: LocationType;
        uicCode?: string;
        weight?: number;
    }
}

declare module 'node-ns-api/domain/enums' {
    export enum CommutingType {
        Bike = "BIKE",
        Bus = "BUS",
        Car = "CAR",
        Ferry = "FERRY",
        Metro = "METRO",
        Subway = "SUBWAY",
        Taxi = "TAXI",
        Train = "TRAIN",
        Tram = "TRAM",
        Unknown = "UNKNOWN",
        Walk = "WALK"
    }
    export enum TravelType {
        Bike = "BIKE",
        Car = "CAR",
        Kiss = "KISS",
        PublicTransit = "PUBLIC_TRANSIT",
        Taxi = "TAXI",
        Transfer = "TRANSFER",
        Unknown = "UNKNOWN",
        Walk = "WALK"
    }
    export enum StationType {
        FacultatiefStation = "FACULTATIEF_STATION",
        IntercityStation = "INTERCITY_STATION",
        KnooppuntIntercityStation = "KNOOPPUNT_INTERCITY_STATION",
        KnooppuntSneltreinStation = "KNOOPPUNT_SNELTREIN_STATION",
        KnooppuntStoptreinStation = "KNOOPPUNT_STOPTREIN_STATION",
        MegaStation = "MEGA_STATION",
        SneltreinStation = "SNELTREIN_STATION",
        StoptreinStation = "STOPTREIN_STATION"
    }
    export enum Richting {
        Heen = "HEEN",
        HeenEnTerug = "HEEN_EN_TERUG"
    }
    export enum VerstoringsType {
        Evenement = "EVENEMENT",
        MeldingPrio1 = "MELDING_PRIO_1",
        MeldingPrio2 = "MELDING_PRIO_2",
        MeldingPrio3 = "MELDING_PRIO_3",
        Storing = "STORING",
        Werkzaamheid = "WERKZAAMHEID"
    }
    export enum CrowdForecast {
        High = "HIGH",
        Low = "LOW",
        Medium = "MEDIUM",
        Unknown = "UNKNOWN"
    }
    export enum DiscountType {
        Discount20_Percent = "DISCOUNT_20_PERCENT",
        Discount40_Percent = "DISCOUNT_40_PERCENT",
        FipDiscount = "FIP_DISCOUNT",
        NoCharge = "NO_CHARGE",
        NoDiscount = "NO_DISCOUNT"
    }
    export enum ProductType {
        AltijdVoordeel = "ALTIJD_VOORDEEL",
        AltijdVrij = "ALTIJD_VRIJ",
        BusinessCardTrajectVrijJaar = "BUSINESS_CARD_TRAJECT_VRIJ_JAAR",
        Businesscard = "BUSINESSCARD",
        BusinesscardDAL = "BUSINESSCARD_DAL",
        DALVoordeel = "DAL_VOORDEEL",
        DALVrij = "DAL_VRIJ",
        EticketEnkeleReis = "ETICKET_ENKELE_REIS",
        EticketRetour = "ETICKET_RETOUR",
        NSI = "NSI",
        OvchipkaartEnkeleReis = "OVCHIPKAART_ENKELE_REIS",
        OvchipkaartRetour = "OVCHIPKAART_RETOUR",
        Railrunner = "RAILRUNNER",
        Samenreiskorting = "SAMENREISKORTING",
        StudentWeek = "STUDENT_WEEK",
        StudentWeekend = "STUDENT_WEEKEND",
        TrajectVrij = "TRAJECT_VRIJ",
        TrajectVrijJaar = "TRAJECT_VRIJ_JAAR",
        TrajectVrijMaand = "TRAJECT_VRIJ_MAAND",
        Vdu = "VDU",
        WeekendVrij = "WEEKEND_VRIJ"
    }
    export enum TravelClass {
        FirstClass = "FIRST_CLASS",
        SecondClass = "SECOND_CLASS"
    }
    export enum Status {
        Additional = "ADDITIONAL",
        AlternativeTransport = "ALTERNATIVE_TRANSPORT",
        Cancelled = "CANCELLED",
        ChangeCouldBePossible = "CHANGE_COULD_BE_POSSIBLE",
        ChangeNotPossible = "CHANGE_NOT_POSSIBLE",
        Disruption = "DISRUPTION",
        Maintenance = "MAINTENANCE",
        Normal = "NORMAL",
        Replacement = "REPLACEMENT",
        Special = "SPECIAL"
    }
    export enum AdviceSource {
        Google = "GOOGLE",
        NS = "NS",
        NSAccessible = "NS_ACCESSIBLE",
        Negentwee = "NEGENTWEE",
        Pas = "PAS"
    }
    export enum CheckinStatus {
        Checkin = "CHECKIN",
        Checkout = "CHECKOUT",
        Detour = "DETOUR",
        Nothing = "NOTHING",
        Overcheck = "OVERCHECK",
        RequiredCheckOutIn = "REQUIRED_CHECK_OUT_IN"
    }
    export enum ExitSide {
        Left = "LEFT",
        Right = "RIGHT",
        Unknown = "UNKNOWN"
    }
    export enum NoteType {
        Attribute = "ATTRIBUTE",
        Hint = "HINT",
        Infotext = "INFOTEXT",
        Realtime = "REALTIME",
        Ticket = "TICKET",
        Unknown = "UNKNOWN"
    }
    export enum LocationType {
        Address = "ADDRESS",
        PointOfInterest = "POINT_OF_INTEREST",
        Station = "STATION"
    }
    export enum ContentType {
        Btm = "BTM",
        TrainJSON = "TRAIN_JSON",
        TrainXML = "TRAIN_XML"
    }
    export enum JourneyStatus {
        Additional = "ADDITIONAL",
        Planned = "PLANNED",
        Replacement = "REPLACEMENT",
        Special = "SPECIAL"
    }
    export enum MessageType {
        Disruption = "DISRUPTION",
        Maintenance = "MAINTENANCE"
    }
}

declare module 'node-ns-api/domain/geldigheid' {
    export interface Geldigheid {
        eindDatum?: string;
        eindTijd?: string;
        startDatum?: string;
        startTijd?: string;
    }
}

declare module 'node-ns-api/domain/journey-detail-link' {
    import { ContentType } from "node-ns-api/domain/enums";
    import { Link } from "node-ns-api/domain/links";
    export interface JourneyDetailLink {
        link?: Link;
        type?: ContentType;
    }
}

declare module 'node-ns-api/domain/lat-lng' {
    export interface LatLng {
        lat?: number;
        lng?: number;
    }
}

declare module 'node-ns-api/domain/leg' {
    import { CrowdForecast, TravelType, JourneyStatus } from "node-ns-api/domain/enums";
    import { Destination } from "node-ns-api/domain/destination";
    import { Stop } from "node-ns-api/domain/stop";
    import { JourneyDetailLink } from "node-ns-api/domain/journey-detail-link";
    import { LatLng } from "node-ns-api/domain/lat-lng";
    import { Note } from "node-ns-api/domain/note";
    import { Product } from "node-ns-api/domain/product";
    import { Step } from "node-ns-api/domain/step";
    import { Message } from "node-ns-api/domain/message";
    export interface Leg {
        alternativeTransport?: boolean;
        cancelled?: boolean;
        changeCouldBePossible?: boolean;
        changePossible?: boolean;
        coordinates?: number[];
        crossPlatformTransfer?: boolean;
        crowdForecast?: CrowdForecast;
        destination?: Destination;
        direction?: string;
        distance?: number;
        firstStop?: Stop;
        idx?: string;
        journeyDetail?: JourneyDetailLink[];
        journeyDetailRef?: string;
        journeyStatus?: JourneyStatus;
        lastStop?: Stop;
        messages?: Message[];
        name?: string;
        notes?: Note[];
        origin?: Destination;
        overviewPolyLine?: LatLng[];
        plannedDurationInMinutes?: number;
        product?: Product;
        publicTransit?: boolean;
        punctuality?: number;
        punctualityInternal?: number;
        reachable?: boolean;
        shorterStock?: boolean;
        steps?: Step[];
        stops?: Stop[];
        travelAssistanceArrival?: {
            [key: string]: any;
        };
        travelAssistanceDeparture?: {
            [key: string]: any;
        };
        travelOrNeccesaryWalk?: boolean;
        travelType?: TravelType;
    }
}

declare module 'node-ns-api/domain/links' {
    export interface Link {
        params?: {
            [key: string]: string;
        };
        rel?: string;
        rels?: string[];
        title?: string;
        type?: string;
        uri?: string;
        uriBuilder?: {
            [key: string]: any;
        };
    }
}

declare module 'node-ns-api/domain/locatie' {
    export interface Locatie {
        code?: string;
        empty?: boolean;
    }
}

declare module 'node-ns-api/domain/location' {
    export interface Location {
        city?: string;
        countryCode?: string;
        lat?: number;
        lng?: number;
        name?: string;
        products?: number;
        uicCode?: string;
        weight?: number;
    }
}

declare module 'node-ns-api/domain/message' {
    import { MessageType } from "node-ns-api/domain/enums";
    export interface Message {
        endDate?: string;
        endTime?: string;
        externalId?: string;
        head?: string;
        lead?: string;
        startDate?: string;
        startTime?: string;
        text?: string;
        type?: MessageType;
    }
}

declare module 'node-ns-api/domain/namen' {
    export interface Namen {
        kort?: string;
        lang?: string;
        middel?: string;
    }
}

declare module 'node-ns-api/domain/note' {
    import { NoteType } from "node-ns-api/domain/enums";
    import { Link } from "node-ns-api/domain/links";
    export interface Note {
        alternativeTransport?: boolean;
        key?: string;
        link?: Link;
        noteType?: NoteType;
        presentationRequired?: boolean;
        priority?: number;
        routeIdxFrom?: number;
        routeIdxTo?: number;
        value?: string;
    }
}

declare module 'node-ns-api/domain/prijs-traject' {
    export interface PrijsTraject {
        bedrag?: number;
        idVerkoopcombinatie?: number;
        opstaptarief?: number;
    }
}

declare module 'node-ns-api/domain/product' {
    import { CommutingType } from "node-ns-api/domain/enums";
    export interface Product {
        categoryCode?: string;
        displayName?: string;
        longCategoryName?: string;
        number?: string;
        operatorCode?: string;
        operatorName?: string;
        shortCategoryName?: string;
        type?: CommutingType;
    }
}

declare module 'node-ns-api/domain/reisadviezen' {
    import { VerstoringReisadvies } from "node-ns-api/domain/verstoring-reisadvies";
    export interface Reisadviezen {
        titel?: string;
        verstoringreisadvies?: VerstoringReisadvies[];
    }
}

declare module 'node-ns-api/domain/self' {
    export interface Self {
        params?: {
            [key: string]: string;
        };
        rel?: string;
        rels?: string[];
        title?: string;
        type?: string;
        uri?: string;
        uriBuilder?: {
            [key: string]: any;
        };
    }
}

declare module 'node-ns-api/domain/share-url' {
    export interface ShareURL {
        params?: {
            [key: string]: string;
        };
        rel?: string;
        rels?: string[];
        title?: string;
        type?: string;
        uri?: string;
        uriBuilder?: {
            [key: string]: any;
        };
    }
}

declare module 'node-ns-api/domain/step' {
    import { Location } from "node-ns-api/domain/location";
    export interface Step {
        distanceInMeters?: number;
        durationInSeconds?: number;
        endLocation?: Location;
        instructions?: string;
        startLocation?: Location;
    }
}

declare module 'node-ns-api/domain/stop' {
    export interface Stop {
        actualArrivalDateTime?: string;
        actualArrivalTimeZoneOffset?: number;
        actualArrivalTrack?: string;
        actualDepartureDateTime?: string;
        actualDepartureTimeZoneOffset?: number;
        actualDepartureTrack?: string;
        arrivalDelayInSeconds?: number;
        cancelled?: boolean;
        city?: string;
        countryCode?: string;
        departureDelayInSeconds?: number;
        lat?: number;
        lng?: number;
        name?: string;
        passing?: boolean;
        plannedArrivalDateTime?: string;
        plannedArrivalTimeZoneOffset?: number;
        plannedArrivalTrack?: string;
        plannedDepartureDateTime?: string;
        plannedDepartureTimeZoneOffset?: number;
        plannedDepartureTrack?: string;
        products?: number;
        routeIdx?: number;
        uicCode?: string;
        weight?: number;
    }
}

declare module 'node-ns-api/domain/traject' {
    import { PrijsTraject } from "node-ns-api/domain/prijs-traject";
    export interface Traject {
        afstand1eKlasse?: number;
        afstand2eKlasse?: number;
        cdTariefpuntNaar?: number;
        cdTariefpuntVan?: number;
        indVolledig2eKlasse?: boolean;
        naamVervoer?: string;
        prijsTraject?: PrijsTraject[];
        vervoerders?: number;
    }
}

declare module 'node-ns-api/domain/travel-advice' {
    import { Trip } from "node-ns-api/domain/trip";
    export interface TravelAdvice {
        firstArrival?: string;
        firstDeparture?: string;
        firstTrip?: Trip;
        lastTrip?: Trip;
        lastTripArrival?: string;
        lastTripDeparture?: string;
        message?: string;
        scrollRequestBackwardContext?: string;
        scrollRequestForwardContext?: string;
        trips?: Trip[];
    }
}

declare module 'node-ns-api/domain/trip' {
    import { CrowdForecast, Status, AdviceSource } from "node-ns-api/domain/enums";
    import { Fare } from "node-ns-api/domain/trip-fare";
    import { Leg } from "node-ns-api/domain/leg";
    import { LatLng } from "node-ns-api/domain/lat-lng";
    import { ShareURL } from "node-ns-api/domain/share-url";
    export interface Trip {
        actualDurationInMinutes?: number;
        checksum?: string;
        crowdForecast?: CrowdForecast;
        ctxRecon?: string;
        fares?: Fare[];
        firstLeg?: Leg;
        idx?: number;
        lastLeg?: Leg;
        legs?: Leg[];
        optimal?: boolean;
        overviewPolyLine?: LatLng[];
        plannedDurationInMinutes?: number;
        productFare?: Fare;
        punctuality?: number;
        realtime?: boolean;
        shareUrl?: ShareURL;
        status?: Status;
        transfers?: number;
        travelAssistanceInfo?: {
            [key: string]: any;
        };
        type?: AdviceSource;
    }
}

declare module 'node-ns-api/domain/verstoring-reisadvies' {
    export interface VerstoringReisadvies {
        advies?: string[];
        titel?: string;
    }
}

declare module 'node-ns-api/params/arrival-departure-parameters' {
    export interface ArrivalDepartureParameters {
            /**
                * Format - date-time (as date-time in RFC3339). return departures or arrivals starting at a given dateTime in ISO8601
                */
            dateTime?: string;
            /**
                * Format - int32. number of departures or arrivals to return
                */
            maxJourneys?: number;
            /**
                * language to use for translatable messages. Note that not all messages are translated.
                */
            lang?: string;
            /**
                * specify a station by NS abbreviation/code (e.g. ASD or UT)
                */
            station?: string;
            /**
                * specify a station by UIC code (84xxxxx)
                */
            uicCode?: string;
            /**
                * forces to use a certain source
                */
            source?: string;
    }
}

declare module 'node-ns-api/params/disruption-parameters' {
    export interface DisruptionParameters {
            /**
                * Type of the disruptions. If not present both will be returned.
                */
            type?: string;
            /**
                * Whether to only return disruptions within 2 hours of the request.
                */
            actual?: boolean;
            /**
                * The language in which to return the disruption messages, note that not all messages are translated.
                */
            lang?: string;
    }
}

declare module 'node-ns-api/params/trip-parameters' {
    export interface TripParameters {
            /**
                * reconstruction context to use as basis for finding trip
                */
            ctxRecon: string;
            /**
                * date to use when reconstructing trip, may be a different date than the trip was originally planned
                */
            date?: string;
            /**
                * language to return text in (not all texts are translated)
                */
            lang?: string;
            /**
                * name/constant of product customer will use in travel, if omitted defaults to ROS
                */
            product?: string;
            /**
                * class of travel to use when calculating product prices
                */
            travelClass?: string;
            /**
                * discount of travel to use when calculating product prices
                */
            discount?: string;
            /**
                * Type of travelRequest, with or without directions
                */
            travelRequestType?: string;
    }
}

declare module 'node-ns-api/params/trips-parameters' {
    export interface TripsParameters {
            /**
                * Latitude of station/stop coordinate of the trip’s origin
                */
            originLat?: string;
            /**
                * Longitude of station/stop coordinate of the trip’s origin
                */
            originLng?: string;
            /**
                * Latitude of station/stop coordinate of the trip’s destination
                */
            destinationLat?: string;
            /**
                * Longitude of station/stop coordinate of the trip’s destination
                */
            destinationLng?: string;
            /**
                * Latitude of station/stop coordinate of the trip’s via point
                */
            viaLat?: string;
            /**
                * Longitude of station/stop coordinate of the trip’s via point
                */
            viaLng?: string;
            /**
                * Format - int32. Waiting time at the via location, exclusive of transfer time
                */
            viaWaitTime?: number;
            /**
                * Format - date-time (as date-time in RFC3339). Departure date / time for the search. defaults to server time (Europe/Amsterdam)
                */
            dateTime?: string;
            /**
                * If set, the date and time parameters specify the arrival time for the trip search instead of the departure time
                */
            searchForArrival?: boolean;
            /**
                * Format - int32. Minimum number of advices before the search time
                */
            previousAdvices?: number;
            /**
                * Format - int32. Minimum number of trips after the search time
                */
            nextAdvices?: number;
            /**
                * Defines the starting point for the scroll back or forth operation. Use the scrB value from a previous result to scroll backwards in time and use the scrF value to scroll forward
                */
            context?: string;
            /**
                * Format - int32. Extra time required at all transfers to change trains
                */
            addChangeTime?: number;
            /**
                * Language to return information for (only a small subset of text is translated, mainly notes)
                */
            lang?: string;
            /**
                * Language to return information for (only a small subset of text is translated, mainly notes)
                * (Description probably broken)
                */
            polylines?: boolean;
            /**
                * (legacy parameter, not supported for JSON) zip code for origin
                */
            fromZip?: string;
            /**
                * (legacy parameter, not supported for JSON) zip code for destination
                */
            toZip?: string;
            /**
                * (legacy parameter, not supported for JSON) travel method for origin
                */
            travelMethodFrom?: string;
            /**
                * (legacy parameter, not supported for JSON) travel method for destination
                */
            travelMethodTo?: string;
            /**
                * Name/constant of product customer will use in travel, if omitted defaults to ROS
                */
            product?: string;
            /**
                * class of travel to use when calculating product prices
                */
            travelClass?: string;
            /**
                * discount of travel to use when calculating product prices
                */
            discount?: string;
            /**
                * Station from which a travel product has been purchased (intended for TrajectVrij)
                */
            productStationFrom?: string;
            /**
                * Station to which a travel product has been purchased (intended for TrajectVrij)
                */
            productStationTo?: string;
            /**
                * Show options which are only allowed with a year card
                */
            yearCard?: boolean;
            /**
                * Return trip advices with transit options to start travel from origin
                */
            originTransit?: boolean;
            /**
                * Return trip advices with walking options to start travel from origin to a train station (first mile)
                */
            originWalk?: boolean;
            /**
                * Return trip advices with biking options to start travel from origin to a train station (first mile)
                */
            originBike?: boolean;
            /**
                * Return trip advices with car options to start travel from origin to a train station (first mile)
                */
            originCar?: boolean;
            /**
                * A name that is returned as the origin in a trip
                */
            originName?: string;
            /**
                * Format - int32. Extra transfertime for the trip assistance booking engine PAS
                */
            travelAssistanceTransferTime?: number;
            /**
                * Return trip advices that are accessible. (might be bookable too)
                */
            searchForAccessibleTrip?: boolean;
            /**
                * Return trip advices with transit options to finish travel to the destination
                */
            destinationTransit?: boolean;
            /**
                * Return trip advices with walking options to finish travel to the destination (last mile)
                */
            destinationWalk?: boolean;
            /**
                * Return trip advices with biking options to finish travel to the destination (last mile)
                */
            destinationBike?: boolean;
            /**
                * Return trip advices with car options to finish travel to the destination (last mile)
                */
            destinationCar?: boolean;
            /**
                * A name that is returned as the destination in a trip
                */
            destinationName?: string;
            /**
                * Accesibility equipment to use when searching for trip assistance options (AVG/PAS)
                */
            accessibilityEquipment1?: string;
            /**
                * Secondary accesibility equipment to use when searching for trip assistance options (AVG/PAS)
                */
            accessibilityEquipment2?: string;
            /**
                * Exclude high speed trains from results (including those with a required reservation)
                */
            excludeHighSpeedTrains?: boolean;
            /**
                * Exclude trains for domestic trips that require a reservation (e.g. Thalys)
                */
            excludeReservationRequired?: boolean;
            /**
                * Show intermediate stops that the journey passes but doesn't stop at
                */
            passing?: boolean;
            /**
                * directionsOnly only plans a google directions (walk/bike/car) advice
                */
            travelRequestType?: string;
            /**
                * EVA code of the station of the trips origin
                */
            originEVACode?: string;
            /**
                * EVA code of the station of the trips destination
                */
            destinationEVACode?: string;
            /**
                * EVA code of the station of the trips via point
                */
            viaEVACode?: string;
            /**
                * Changes the CHANGE_NOT_POSSIBLE status to CHANGE_COULD_BE_POSSIBLE if the traveler can walk twice as fast
                */
            shorterChange?: boolean;
            /**
                * Station code of the trips origin
                */
            fromStation?: string;
            /**
                * Station code of the trips destination
                */
            toStation?: string;
            /**
                * UIC code of the station of the trips origin
                */
            originUicCode?: string;
            /**
                * UIC code of the station of the trips destination
                */
            destinationUicCode?: String;
            /**
                * UIC code of the station of the trips via point
                */
            viaUicCode?: string;
            /**
                * Whether a bike space is required on the train(s).
                */
            bikeCarriageRequired?: boolean;
            /**
                * Station code of the trips via point
                */
            viaStation?: string;
            /**
                * Whether the provided time is the departure time.
                */
            departure?: boolean;
            /**
                * Format - int32. The minimum change time between transfers in minutes.
                */
            minimalChangeTime?: number;
    }
}

declare module 'node-ns-api/i-api' {
    import { Station } from "node-ns-api/domain/station";
    import { Verstoring } from "node-ns-api/domain/verstoring";
    import { ArrivalDepartureParameters } from "node-ns-api/params/arrival-departure-parameters";
    import { ArrivalBoard } from "node-ns-api/domain/arrival-board";
    import { DepartureBoard } from "node-ns-api/domain/departure-board";
    import { TravelAdvice } from "node-ns-api/domain/travel-advice";
    import { DisruptionParameters } from "node-ns-api/params/disruption-parameters";
    import { TripParameters } from "node-ns-api/params/trip-parameters";
    import { TripsParameters } from "node-ns-api/params/trips-parameters";
    export interface IApi {
            /**
                * List of stations
                */
            getAllStations(): Promise<Station[]>;
            /**
                * Arrival times for a specified station. Either the UIC code or station is required
                * @param params (Optional) parameters
                */
            getArrivals(params?: ArrivalDepartureParameters): Promise<ArrivalBoard>;
            /**
                * Departure times for a specified station. Either the UIC code or station is required.
                * @param params (Optional) parameters
                */
            getDepartures(params?: ArrivalDepartureParameters): Promise<DepartureBoard>;
            /**
                * Returns a large list of departure times for a specified station. Either the UICCode or station is required. Note: This request returns a large amount of data, if not necessary use the non big request..
                * @param params (Optional) parameters
                */
            getBigDepartures(params?: ArrivalDepartureParameters): Promise<DepartureBoard>;
            /**
                * Specific disruption/maintenance
                * @param params id of the specific disruption / maintenance
                */
            getDisruption(params: {
                    id: string;
            }): Promise<Verstoring>;
            /**
                * List of disruptions/maintenance.
                * @param params (Optional) parameters
                */
            getDisruptions(params?: DisruptionParameters): Promise<Verstoring>;
            /**
                * Disruptions for a station, code is either a UIC code or old-skool station code
                * @param params The UICCode or the station code
                */
            getStationDisruption(params: {
                    code: string;
            }): Promise<Verstoring>;
            /**
                * Reconstruct a trip if possible using the given reconCtx (representation of a trip found in a travel advice)
                * @param params parameters
                */
            getTrip(params?: TripParameters): Promise<TravelAdvice>;
            /**
                * Searches for a travel advice with the specified options between the possible backends (HARP, 9292 or PAS/AVG). Defaults to legacy XML implementation, specify header in order to get JSON
                * @param params (Optional) parameters
                */
            getTrips(params?: TripsParameters): Promise<TravelAdvice>;
    }
}

declare module 'node-ns-api/domain/baanvak' {
    export interface Baanvak {
        stations?: string[];
    }
}

declare module 'node-ns-api/domain/trip-fare' {
    import { DiscountType, ProductType, TravelClass } from "node-ns-api/domain/enums";
    export interface Fare {
        discountType?: DiscountType;
        link?: string;
        priceInCents?: number;
        priceInCentsExcludingSupplement?: number;
        priceInCentsExcludingSupplementOrPrice?: number;
        product?: ProductType;
        supplementInCents?: number;
        travelClass?: TravelClass;
    }
}

